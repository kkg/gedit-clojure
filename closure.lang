<?xml version="1.0" encoding="UTF-8"?>

<language id="closure" _name="Closure" version="2.0" _section="Sources">
  <metadata>
    <property name="mimetypes">text/x-clojure;application/x-clojure</property> <!-- not sure about these -->
    <property name="globs">*.clj</property>
    <property name="line-comment-start">;</property>
  </metadata>

  <styles>
    <style id="comment"           _name="Comment"               map-to="def:comment"/>
    <style id="module-handler"    _name="Module Handler"        map-to="def:preprocessor"/>
    <style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
    <style id="escaped-char"      _name="Escaped Character"     map-to="def:special-char"/>
    <style id="multiline-string"  _name="Multiline string"      map-to="def:string"/>
    <style id="builtin-constant"  _name="Builtin Constant"      map-to="def:special-constant"/>
    <style id="builtin-function"  _name="Builtin Function"      map-to="def:builtin"/>
    <style id="clj-ident"         _name="Identifier"            map-to="def:identifier"/>
  </styles>

  <definitions>
    <context id="line-comment" style-ref="comment" end-at-line-end="true">
      <start>;</start>
      <include>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="escaped-char" style-ref="escaped-char" extend-parent="true">
      <match extended="true">
        \\(                 # open
        [\\"btnfr]        | # simple
        u[0-9A-Fa-f]{4}   | # 16-bit hex value
        [0-7]{1,3}          # octal
        )
      </match>
    </context>

    <context id="multiline-string" style-ref="multiline-string">
      <start>"</start>
      <end>"</end>
      <include>
        <context ref="escaped-char"/>
      </include>
    </context>

    <context id="closure">
      <include>
        <context ref="multiline-string"/>

        <context ref="line-comment"/>

        <context id="module-handler" style-ref="module-handler">
          <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
          <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
          <keyword>ns</keyword>
          <keyword>use</keyword>
          <keyword>require</keyword>
        </context>

        <context id="reserved" style-ref="keyword">
          <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
          <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
          <keyword>true</keyword>
          <keyword>false</keyword>
          <keyword>nil</keyword>
        </context>

        <context id="special" style-ref="builtin-constant">
          <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
          <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
          <keyword>def</keyword>
          <keyword>if</keyword>
          <keyword>do</keyword>
          <keyword>quote</keyword>
          <keyword>var</keyword>
          <keyword>recur</keyword>
          <keyword>throw</keyword>
          <keyword>try</keyword>
          <keyword>monitor-enter</keyword>
          <keyword>monitor-exit</keyword>
          <keyword>\.</keyword>
          <keyword>new</keyword>
          <keyword>set!</keyword>
          <keyword>fn\*</keyword>
          <keyword>let\*</keyword>
          <keyword>loop\*</keyword>
          <keyword>letfn\*</keyword>
          <keyword>case\*</keyword>
          <keyword>deftype\*</keyword>
          <keyword>reify\*</keyword>
          <keyword>clojure\.core/import\*</keyword>
        </context>

        <context id="builtin-macro" style-ref="builtin-function">
          <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
          <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
          <keyword>defn</keyword>
          <keyword>fn</keyword>
          <keyword>let</keyword>
          <keyword>loop</keyword>
        </context>

        <context id="builtin-function" style-ref="builtin-function">
          <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
          <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
          <keyword>type</keyword>
          <keyword>apply</keyword>
          <keyword>str</keyword>
      <!-- also + -->
        </context>

        <context id="clj-keyword" style-ref="keyword">
          <prefix>:</prefix>
          <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
          <keyword>[^\s\[\]\{\}\(\);\\"@~`\^,']+</keyword>
        </context>

        <context id="clj-ident" style-ref="clj-ident">
          <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
          <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
          <keyword>[^\s,";@\^`~\(\)\[\]\{\}\\'#][^\s,";@\^`~\(\)\[\]\{\}\\]*</keyword>
        </context>

      </include>
    </context>
  </definitions>
</language>

