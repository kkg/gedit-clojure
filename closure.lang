<?xml version="1.0" encoding="UTF-8"?>

<language id="closure" _name="Closure" version="2.0" _section="Sources">
  <metadata>
    <property name="mimetypes">text/x-clojure;application/x-clojure</property> <!-- not sure about these -->
    <property name="globs">*.clj</property>
    <property name="line-comment-start">;</property>
  </metadata>

  <styles>
    <style id="comment"           _name="Comment"               map-to="def:comment"/>
    <style id="module-handler"    _name="Module Handler"        map-to="def:preprocessor"/>
    <style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
    <style id="escaped-char"      _name="Escaped Character"     map-to="def:special-char"/>
    <style id="string"            _name="Multiline string"      map-to="def:string"/>
    <style id="special"           _name="Special form"          map-to="def:special-constant"/>
    <style id="function"          _name="Builtin function"      map-to="def:builtin"/>
    <style id="macro"             _name="Macro"                 map-to="def:special-constant"/>
    <style id="ident"             _name="Identifier"            map-to="def:identifier"/>
    <style id="argument"          _name="Argument"              map-to="def:special-constant"/>
    <style id="character"         _name="Character"             map-to="def:constant"/>
    <style id="number"            _name="Number"                map-to="def:constant"/>
  </styles>

  <definitions>

    <context id="clj-comment" style-ref="comment" end-at-line-end="true">
      <start>(;|#!)</start>
      <include>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="clj-string" style-ref="string">
      <start>"</start>
      <end>"</end>
      <include>
        <context id="string-escape" style-ref="escaped-char" extend-parent="true">
          <match extended="true">
            \\(                 # open
            [\\"btnfr]        | # simple
            u[0-9A-Fa-f]{4}   | # 16-bit hex value
            [0-7]{1,3}          # octal
            )
          </match>
        </context>
      </include>
    </context>

    <context id="clj-regex" style-ref="string">
      <start>#"</start>
      <end>"</end>
      <include>
        <context id="regex-escape" style-ref="escaped-char" extend-parent="true">
          <match extended="true">
            \\(          # open
            [\\"]        # just \ or " (ignoring internal syntax of regex)
            )
          </match>
        </context>
      </include>
    </context>

    <context id="clj-number" style-ref="number">
      <prefix></prefix>
      <suffix></suffix>
      <keyword>\d[^\s\[\]\{\}\(\);\\"@~`\^,'%#]*</keyword>
    </context>

    <context id="clj-char" style-ref="character">
      <prefix></prefix>
      <suffix></suffix>
      <keyword>\\.[^\s,";@\^`~\(\)\[\]\{\}\\]*</keyword>
    </context>

    <context id="clj-arg" style-ref="argument">
      <prefix></prefix>
      <suffix></suffix>
      <keyword>%[^\s,";@\^`~\(\)\[\]\{\}\\]*</keyword>
    </context>

    <context id="clj-imports" style-ref="module-handler">
      <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
      <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
      <keyword>ns</keyword>
      <keyword>use</keyword>
      <keyword>require</keyword>
    </context>

    <context id="clj-reserved" style-ref="keyword">
      <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
      <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
      <keyword>true</keyword>
      <keyword>false</keyword>
      <keyword>nil</keyword>
    </context>

    <context id="clj-special" style-ref="special">
      <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
      <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
      <keyword>def</keyword>
      <keyword>if</keyword>
      <keyword>do</keyword>
      <keyword>quote</keyword>
      <keyword>var</keyword>
      <keyword>recur</keyword>
      <keyword>throw</keyword>
      <keyword>try</keyword>
      <keyword>monitor-enter</keyword>
      <keyword>monitor-exit</keyword>
      <keyword>\.</keyword>
      <keyword>new</keyword>
      <keyword>set!</keyword>
      <keyword>fn\*</keyword>
      <keyword>let\*</keyword>
      <keyword>loop\*</keyword>
      <keyword>letfn\*</keyword>
      <keyword>case\*</keyword>
      <keyword>deftype\*</keyword>
      <keyword>reify\*</keyword>
      <keyword>clojure\.core/import\*</keyword>
    </context>

    <context id="other-builtin" style-ref="macro">
      <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
      <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
      <keyword>unquote</keyword>
      <keyword>unquote-splicing</keyword>
      <keyword>\*1</keyword>
      <keyword>\*2</keyword>
      <keyword>\*3</keyword>
      <keyword>\*e</keyword>
      <keyword>\*clojure-version\*</keyword>
      <keyword>default-data-readers</keyword>
      <keyword>\*data-readers\*</keyword>
      <keyword>\*default-data-reader-fn\*</keyword>
      <keyword>&amp;</keyword>
    </context>

    <context id="clj-macro" style-ref="macro">
      <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
      <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
      <keyword>defn</keyword>
      <keyword>defmacro</keyword>
      <keyword>when</keyword>
      <keyword>when-not</keyword>
      <keyword>cond</keyword>
      <keyword>lazy-seq</keyword>
      <keyword>delay</keyword>
      <keyword>if-not</keyword>
      <keyword>and</keyword>
      <keyword>or</keyword>
      <keyword>locking</keyword>
      <keyword>\.\.</keyword>
      <keyword>-&lt;</keyword>
      <keyword>fn</keyword>
      <keyword>let</keyword>
      <keyword>loop</keyword>
      <keyword>-&lt;&lt;</keyword>
      <keyword>defmulti</keyword>
      <keyword>defmethod</keyword>
      <keyword>if-let</keyword>
      <keyword>when-let</keyword>
      <keyword>if-some</keyword>
      <keyword>when-some</keyword>
      <keyword>binding</keyword>
      <keyword>with-bindings</keyword>
      <keyword>bound-fn</keyword>
      <keyword>sync</keyword>
      <keyword>io!</keyword>
      <keyword>dotimes</keyword>
      <keyword>declare</keyword>
      <keyword>doseq</keyword>
      <keyword>import</keyword>
      <keyword>with-open</keyword>
      <keyword>doto</keyword>
      <keyword>memfn</keyword>
      <keyword>time</keyword>
      <keyword>defstruct</keyword>
      <keyword>with-local-vars</keyword>
      <keyword>when-first</keyword>
      <keyword>lazy-cat</keyword>
      <keyword>for</keyword>
      <keyword>comment</keyword>
      <keyword>with-out-str</keyword>
      <keyword>with-in-str</keyword>
      <keyword>assert</keyword>
      <keyword>defn-</keyword>
      <keyword>dosync</keyword>
      <keyword>with-precision</keyword>
      <keyword>definline</keyword>
      <keyword>amap</keyword>
      <keyword>areduce</keyword>
      <keyword>with-loading-context</keyword>
      <keyword>ns</keyword>
      <keyword>refer-clojure</keyword>
      <keyword>defonce</keyword>
      <keyword>while</keyword>
      <keyword>condp</keyword>
      <keyword>letfn</keyword>
      <keyword>case</keyword>
      <keyword>future</keyword>
      <keyword>pvalues</keyword>
      <keyword>with-redefs</keyword>
      <keyword>cond-&gt;</keyword>
      <keyword>cond-&gt;&gt;</keyword>
      <keyword>as-&gt;</keyword>
      <keyword>some-&gt;</keyword>
      <keyword>some-&gt;&gt;</keyword>
    </context>

    <context id="clj-function" style-ref="function">
      <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
      <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
      <keyword>type</keyword>
      <keyword>apply</keyword>
      <keyword>map</keyword>
      <keyword>str</keyword>
      <keyword>last</keyword>
      <keyword>butlast</keyword>
      <keyword>list</keyword>
      <keyword>cons</keyword>
      <keyword>first</keyword>
      <keyword>next</keyword>
      <keyword>rest</keyword>
      <keyword>conj</keyword>
      <keyword>second</keyword>
      <keyword>ffirst</keyword>
      <keyword>nfirst</keyword>
      <keyword>fnext</keyword>
      <keyword>nnext</keyword>
      <keyword>seq</keyword>
      <keyword>instance\?</keyword>
      <keyword>seq\?</keyword>
      <keyword>string\?</keyword>
      <keyword>char\?</keyword>
      <keyword>map\?</keyword>
      <keyword>vector\?</keyword>
      <keyword>assoc</keyword>
      <keyword>meta</keyword>
      <keyword>with-meta</keyword>
      <keyword>sigs</keyword>
      <keyword>not-every\?</keyword>
      <keyword>not-any\?</keyword>
      <keyword>cast</keyword>
      <keyword>to-array</keyword>
      <keyword>vector</keyword>
      <keyword>vec</keyword>
      <keyword>hash-map</keyword>
      <keyword>hash-set</keyword>
      <keyword>sorted-map</keyword>
      <keyword>sorted-map-by</keyword>
      <keyword>sorted-set</keyword>
      <keyword>sorted-set-by</keyword>
      <keyword>nil\?</keyword>
      <keyword>false\?</keyword>
      <keyword>true\?</keyword>
      <keyword>not</keyword>
      <keyword>some\?</keyword>
      <keyword>symbol\?</keyword>
      <keyword>keyword\?</keyword>
      <keyword>symbol</keyword>
      <keyword>gensym</keyword>
      <keyword>keyword</keyword>
      <keyword>find-keyword</keyword>
      <keyword>spread</keyword>
      <keyword>list\*</keyword>
      <keyword>vary-meta</keyword>
      <keyword>chunk-buffer</keyword>
      <keyword>chunk</keyword>
      <keyword>chunk-first</keyword>
      <keyword>chunk-rest</keyword>
      <keyword>chunk-next</keyword>
      <keyword>chunk-cons</keyword>
      <keyword>chunked-seq\?</keyword>
      <keyword>concat</keyword>
      <keyword>delay\?</keyword>
      <keyword>force</keyword>
      <keyword>identical\?</keyword>
      <keyword>=</keyword>
      <keyword>not=</keyword>
      <keyword>compare</keyword>
      <keyword>zero\?</keyword>
      <keyword>count</keyword>
      <keyword>int</keyword>
      <keyword>nth</keyword>
      <keyword>&lt;</keyword>
      <keyword>inc'</keyword>
      <keyword>inc</keyword>
      <keyword>reverse</keyword>
      <keyword>\+'</keyword>
      <keyword>\+</keyword>
      <keyword>\*'</keyword>
      <keyword>\*</keyword>
      <keyword>\/</keyword>
      <keyword>-'</keyword>
      <keyword>-</keyword>
      <keyword>&lt;=</keyword>
      <keyword>&gt;</keyword>
      <keyword>&gt;=</keyword>
      <keyword>==</keyword>
      <keyword>max</keyword>
      <keyword>min</keyword>
      <keyword>dec'</keyword>
      <keyword>dec</keyword>
      <keyword>unchecked-inc-int</keyword>
      <keyword>unchecked-inc</keyword>
      <keyword>unchecked-dec-int</keyword>
      <keyword>unchecked-dec</keyword>
      <keyword>unchecked-negate-int</keyword>
      <keyword>unchecked-negate</keyword>
      <keyword>unchecked-add-int</keyword>
      <keyword>unchecked-add</keyword>
      <keyword>unchecked-subtract-int</keyword>
      <keyword>unchecked-subtract</keyword>
      <keyword>unchecked-multiply-int</keyword>
      <keyword>unchecked-multiply</keyword>
      <keyword>unchecked-divide-int</keyword>
      <keyword>unchecked-remainder-int</keyword>
      <keyword>pos\?</keyword>
      <keyword>neg\?</keyword>
      <keyword>quot</keyword>
      <keyword>rem</keyword>
      <keyword>rationalize</keyword>
    </context>

    <context id="clj-keyword" style-ref="keyword">
      <prefix>:</prefix>
      <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
      <keyword>[^\s\[\]\{\}\(\);\\"@~`\^,']+</keyword>
    </context>

    <context id="clj-ident" style-ref="ident">
      <prefix>(?&lt;![^\s\[\]\{\}\(\);\\"@~`\^,'])</prefix>
      <suffix>(?![^\s\[\]\{\}\(\);\\"@~`\^,'])</suffix>
      <keyword>[^\s,";@\^`~\(\)\[\]\{\}\\'#][^\s,";@\^`~\(\)\[\]\{\}\\]*</keyword>
    </context>


    <context id="closure">
      <include>
        <context ref="clj-comment"/>
        <context ref="clj-string"/>
        <context ref="clj-regex"/>
        <context ref="clj-number"/>
        <context ref="clj-char"/>
        <context ref="clj-arg"/>
        <!-- reader macros -->
        <context ref="clj-imports"/>
        <context ref="clj-reserved"/>
        <context ref="clj-special"/>
        <context ref="other-builtin"/>
        <context ref="clj-macro"/>
        <context ref="clj-function"/>
        <context ref="clj-keyword"/>
        <context ref="clj-ident"/>
      </include>
    </context>

  </definitions>
</language>

